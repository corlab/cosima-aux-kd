import("eigen_typekit")
import("kdl_typekit")
import("rst-rt_typekit")

import("rtt_gazebo_embedded")
import("rtt-gazebo-robot-sim")

import("cosima-aux-kd")

import("LWRController")
require("os")

loadComponent("gazebo","RTTGazeboEmbedded")
setActivity("gazebo",0,10,ORO_SCHED_OTHER)
gazebo.argv = strings("--verbose")
gazebo.add_plugin("libRTTGazeboClockPlugin.so")

loadComponent("robot_gazebo","cogimon::robotSim")
setActivity("robot_gazebo",0,11,ORO_SCHED_OTHER)

var string path_world=os.getenv("prefix")+"/cogimon-minimal-nightly/etc/cogimon-scenarios/scenario-wipe-board/world/scn-wipe-board-vertical-boris-base-withBox.world"
gazebo.world_path = path_world

gazebo.configure()
gazebo.start()
gazebo.toggleDynamicsSimulation(false)

gazebo.spawn_model_at_pos("boris-ft", "model://boris-ft", 0,0,0)


robot_gazebo.getModel("boris-ft")
var int DOFsize = 14;

var string path_model_urdf = os.getenv("GAZEBO_MODEL_PATH")+"/boris-ft/model.urdf"
var string path_model_srdf = os.getenv("GAZEBO_MODEL_PATH")+"/boris-ft/model.srdf"
robot_gazebo.loadURDFAndSRDF(path_model_urdf, path_model_srdf)
robot_gazebo.configure()

#var bool translationOnly = true;
#var int TaskSpaceDimension = 6;
#var int CstrSpaceDimension = 3;
#var eigen_vector lambda = eigen_vector(3);
var bool translationOnly = false;
var int TaskSpaceDimension = 12;
var int CstrSpaceDimension = 6;
var eigen_vector lambda = eigen_vector(6);
lambda[0] = 0
lambda[1] = 0
lambda[2] =-150
lambda[3] = 0
lambda[4] = 0
lambda[5] = 0

var rstrt.kinematics.JointAngles desJointAngles_start = rstrt.kinematics.JointAngles(DOFsize)
#left arm
desJointAngles_start.angles[0] = 1.5
#desJointAngles_start.angles[1] = 1.05
desJointAngles_start.angles[1] = 0.8
desJointAngles_start.angles[2] =-0.5
desJointAngles_start.angles[3] =-1.5
desJointAngles_start.angles[4] = 0.7
desJointAngles_start.angles[5] = 0.7
desJointAngles_start.angles[6] = 0.0 

#desJointAngles_start.angles[0] = 0.461369
desJointAngles_start.angles[0] = 0.861369
#desJointAngles_start.angles[1] = 1.84417
desJointAngles_start.angles[1] = 1.14417
desJointAngles_start.angles[2] =-1.54299
desJointAngles_start.angles[3] = 1.34663
desJointAngles_start.angles[4] = 1.55174
desJointAngles_start.angles[5] = 1.47731
desJointAngles_start.angles[6] = 0.0 
#gazebo.setInitialConfigurationForModel("boris-ft", desJointAngles_start);
#right arm
desJointAngles_start.angles[7] = 1.65
#desJointAngles_start.angles[8] =-1.1
desJointAngles_start.angles[8] =-0.85
desJointAngles_start.angles[9] = 0.6
desJointAngles_start.angles[10]= 1.5
desJointAngles_start.angles[11]=-0.9
desJointAngles_start.angles[12]=-1.1
desJointAngles_start.angles[13]= 0.0

#desJointAngles_start.angles[7] =-0.46589
desJointAngles_start.angles[7] =-0.86589
#desJointAngles_start.angles[8] = 1.84609
desJointAngles_start.angles[8] = 1.14609
desJointAngles_start.angles[9] =-1.60562
desJointAngles_start.angles[10]=-1.35433
desJointAngles_start.angles[11]= 1.58999
desJointAngles_start.angles[12]= 1.4589
desJointAngles_start.angles[13]= 0.0
#gazebo.setInitialConfigurationForModel("boris-ft", desJointAngles_start);

var rstrt.kinematics.JointAngles desJointAngles = rstrt.kinematics.JointAngles(DOFsize)
#left arm
desJointAngles.angles[0] = 1.5
desJointAngles.angles[1] = 1.05
desJointAngles.angles[2] =-0.5
desJointAngles.angles[3] =-1.5
desJointAngles.angles[4] = 0.5
desJointAngles.angles[5] = 0.7
desJointAngles.angles[6] = 0.0 

desJointAngles.angles[0] = 0.461369
desJointAngles.angles[1] = 1.84417
desJointAngles.angles[2] =-1.54299
desJointAngles.angles[3] = 1.34663
desJointAngles.angles[4] = 1.55174
desJointAngles.angles[5] = 1.47731
desJointAngles.angles[6] = 0.0 

#right arm
desJointAngles.angles[7] = 1.65
desJointAngles.angles[8] =-1.1
desJointAngles.angles[9] = 0.6
desJointAngles.angles[10]= 1.5
desJointAngles.angles[11]=-0.9
desJointAngles.angles[12]=-1.1
desJointAngles.angles[13]= 0.0

desJointAngles.angles[7] =-0.46589
desJointAngles.angles[8] = 1.84609
desJointAngles.angles[9] =-1.60562
desJointAngles.angles[10]=-1.35433
desJointAngles.angles[11]= 1.58999
desJointAngles.angles[12]= 1.4589
desJointAngles.angles[13]= 0.0

#load FeedbackCombiner
loadComponent("combiner", "FeedbackCombiner")
setActivity("combiner",0.01,20,ORO_SCHED_OTHER)
combiner.setDOFsize(DOFsize);
combiner.addChainDOFsize(7)
combiner.addChainDOFsize(7)
combiner.preparePorts("")

#load TorqueCommandSeperator
loadComponent("seperator", "TorqueCommandSeperator")
setActivity("seperator",0.01,20,ORO_SCHED_OTHER)
seperator.setDOFsize(DOFsize);
seperator.addChainDOFsize(7)
seperator.addChainDOFsize(7)
seperator.preparePorts("")

loadComponent("fkin", "WrapperKDLBoris")
setActivity("fkin",0.01,10,ORO_SCHED_OTHER)
fkin.loadModel(path_model_urdf, "krc_base","left_lwr_tool_link","right_lwr_tool_link")
fkin.setDOFsize(DOFsize);
fkin.configure()

loadComponent("task", "TaskDescriberDualArm")
setActivity("task",0.01,10,ORO_SCHED_OTHER)
task.loadModel(path_model_urdf, "left_lwr_tool_link","right_lwr_tool_link")
task.setDOFsize(DOFsize);
task.setContactTime(5+7+5);
task.configure()

loadComponent("caux", "ConstrainedAuxiliaries")
setActivity("caux",0.01,10,ORO_SCHED_OTHER)
caux.setDOFsize(DOFsize);
caux.setTaskSpaceDimension(TaskSpaceDimension);
caux.setCstrSpaceDimension(CstrSpaceDimension);
caux.setConstrainedVersionMode(false);
caux.preparePorts();
caux.configure()


#load joint position controller
loadComponent("jointposcontroller","JointPositionCtrl")
setActivity("jointposcontroller",0.01,30,ORO_SCHED_OTHER)
jointposcontroller.setDOFsizeAndGains(DOFsize,100,3)
jointposcontroller.configure()
jointposcontroller.setDesiredJointAngles(desJointAngles_start)


# load controller related stuff
# load TrajectoryGenerator
loadComponent("trajectorygenerator", "TrajectoryGeneratorBoris")
setActivity("trajectorygenerator",0.01,30,ORO_SCHED_OTHER)
trajectorygenerator.setTranslationOnly(translationOnly);
trajectorygenerator.setWaitTime(7)
trajectorygenerator.setObjectCenter(-0.55,0.0,1.05)
trajectorygenerator.setObjectSize(0.28)
trajectorygenerator.preparePorts()
trajectorygenerator.factor=0.25;
#trajectorygenerator.factor=0.0;
trajectorygenerator.configure()

# load PositionController
loadComponent("positioncontroller", "PositionController")
setActivity("positioncontroller",0.01,30,ORO_SCHED_OTHER)
positioncontroller.setTranslationOnly(translationOnly);
positioncontroller.setDOFsize(DOFsize);
positioncontroller.setConstrainedVersionMode(false);
positioncontroller.setTaskSpaceDimension(TaskSpaceDimension);
positioncontroller.setGains(50,10);
positioncontroller.setGainsOrientation(100,5);
positioncontroller.preparePorts();
positioncontroller.configure();

# connect TrajectoryGenerator to PositionController
var ConnPolicy cp_traj_posCtrl;
connect("trajectorygenerator.out_desiredTaskSpacePosition_port", "positioncontroller.in_desiredTaskSpacePosition_port", cp_traj_posCtrl)
connect("trajectorygenerator.out_desiredTaskSpaceVelocity_port", "positioncontroller.in_desiredTaskSpaceVelocity_port", cp_traj_posCtrl)
connect("trajectorygenerator.out_desiredTaskSpaceAcceleration_port", "positioncontroller.in_desiredTaskSpaceAcceleration_port", cp_traj_posCtrl)


# load NullspaceController
loadComponent("nullspacecontroller", "NullspaceController")
setActivity("nullspacecontroller",0.01,31,ORO_SCHED_OTHER)
nullspacecontroller.setDOFsize(DOFsize);
nullspacecontroller.setTaskSpaceDimension(TaskSpaceDimension);
nullspacecontroller.preparePorts();
nullspacecontroller.setGains(50,1);
nullspacecontroller.setDesiredAngles(desJointAngles)
nullspacecontroller.configure()

# load Constrained ForceController
loadComponent("forcecontroller", "ConstrainedForceController")
setActivity("forcecontroller",0.01,31,ORO_SCHED_OTHER)
forcecontroller.setDOFsize(DOFsize);
forcecontroller.setCstrSpaceDimension(CstrSpaceDimension);
forcecontroller.preparePorts();
forcecontroller.setLambda(lambda);
forcecontroller.configure()


# load TorqueSuperimposer
loadComponent("torquesuperimposer", "TorqueSuperimposer")
setActivity("torquesuperimposer",0.01,29,ORO_SCHED_OTHER)
torquesuperimposer.setDOFsize(DOFsize);
torquesuperimposer.setConstrainedVersionMode(false);
torquesuperimposer.configure()

#load torqueTransition
loadComponent("torqueTransition", "TorqueTransition")
setActivity("torqueTransition",0.01,30,ORO_SCHED_OTHER)
torqueTransition.setDOFsizeAndTransitionTime(DOFsize,5.0)
torqueTransition.configure()

# load Constrained ForceEstimator
loadComponent("forceestimator", "ForceEstimator")
setActivity("forceestimator",0.01,31,ORO_SCHED_OTHER)
forceestimator.setDOFsize(DOFsize);
forceestimator.setFloatingBaseMode(false);
forceestimator.setTaskSpaceDimension(TaskSpaceDimension);
forceestimator.setCstrSpaceDimension(CstrSpaceDimension);
forceestimator.preparePorts();
forceestimator.configure()

# connect PositionController to TorqueSuperimposer
var ConnPolicy cp_pos_sum;
connect("positioncontroller.out_torques_port", "torquesuperimposer.in_torquesA_port", cp_pos_sum)

# connect NullspaceController to TorqueSuperimposer
var ConnPolicy cp_null_sum;
connect("nullspacecontroller.out_torques_port", "torquesuperimposer.in_torquesB_port", cp_null_sum)

# connect ForceController to TorqueSuperimposer
var ConnPolicy cp_force_sum;
connect("forcecontroller.out_torques_port", "torquesuperimposer.in_torquesC_port", cp_force_sum)


# connect all auxiliaries
var ConnPolicy cp_aux;
connect("robot_gazebo.left_full_arm_JointFeedback", "combiner.in_robotstatus_port_0", cp_aux)
connect("robot_gazebo.right_full_arm_JointFeedback", "combiner.in_robotstatus_port_1", cp_aux)
connect("combiner.out_robotstatus_port", "fkin.in_robotstatus_port", cp_aux)
connect("combiner.out_robotstatus_port", "task.in_robotstatus_port", cp_aux)
connect("fkin.out_jacobian_port", "task.in_jacobian_port", cp_aux)
connect("fkin.out_jacobianDot_port", "task.in_jacobianDot_port", cp_aux)

connect("task.out_jacobianTask_port", "caux.in_jacobianTask_port", cp_aux)
connect("task.out_jacobianDotTask_port", "caux.in_jacobianDotTask_port", cp_aux)
connect("task.out_jacobianCstr_port", "caux.in_jacobianCstr_port", cp_aux)
connect("task.out_jacobianDotCstr_port", "caux.in_jacobianDotCstr_port", cp_aux)

connect("fkin.out_inertia_port", "caux.in_inertia_port", cp_aux)

connect("fkin.out_inertia_port", "forcecontroller.in_inertia_port", cp_aux)
connect("fkin.out_coriolisAndGravity_port", "forcecontroller.in_h_port", cp_aux)

###
# connect AUX to PositionController
###
var ConnPolicy cp_aux_positioncontroller;
# kinematics part
connect("task.out_jacobianTask_port", "positioncontroller.in_jacobian_port", cp_aux_positioncontroller)
connect("task.out_jacobianDotTask_port", "positioncontroller.in_jacobianDot_port", cp_aux_positioncontroller)

connect("fkin.out_cartPos_port", "positioncontroller.in_currentTaskSpacePosition_port", cp_aux_positioncontroller)
connect("fkin.out_cartVel_port", "positioncontroller.in_currentTaskSpaceVelocity_port", cp_aux_positioncontroller)

connect("fkin.out_robotstatus_port", "positioncontroller.in_robotstatus_port", cp_aux_positioncontroller)
connect("fkin.out_robotstatus_port", "forcecontroller.in_robotstatus_port", cp_aux_positioncontroller)

# dynamics part
connect("fkin.out_coriolisAndGravity_port", "positioncontroller.in_h_port", cp_aux_positioncontroller)

# constrained part
connect("caux.out_lambdaCstr_port", "positioncontroller.in_constraintLambda_port", cp_aux_positioncontroller)
connect("caux.out_MCstr_port", "positioncontroller.in_constraintM_port", cp_aux_positioncontroller)
connect("caux.out_P_port", "positioncontroller.in_P_port", cp_aux_positioncontroller)
connect("caux.out_CCstr_port", "positioncontroller.in_constraintC_port", cp_aux_positioncontroller)



connect("task.out_jacobianCstr_port", "forcecontroller.in_jacobian_c_port", cp_aux_positioncontroller)
connect("caux.out_CCstr_port", "forcecontroller.in_Cc_port", cp_aux_positioncontroller)
connect("caux.out_MCstr_port", "forcecontroller.in_inertia_c_port", cp_aux_positioncontroller)
connect("caux.out_P_port", "forcecontroller.in_p_port", cp_aux_positioncontroller)

###
# connect AUX to NullspaceController
###
var ConnPolicy cp_aux_nullspacecontroller;
# kinematics part
connect("task.out_jacobianTask_port", "nullspacecontroller.in_jacobian_port", cp_aux_nullspacecontroller)

connect("fkin.out_robotstatus_port", "nullspacecontroller.in_robotstatus_port", cp_aux_nullspacecontroller)

# constrained part
connect("caux.out_jacobianMPI_port", "nullspacecontroller.in_jacobianInv_port", cp_aux_nullspacecontroller)

###
# connect AUX to TorqueSuperImposer
###
var ConnPolicy cp_proj_torquesuperimposer;
connect("caux.out_P_port", "torquesuperimposer.in_projection_port", cp_aux_nullspacecontroller)

###
# connect TorqueSuperImposer to ROBOT
###

### connections jointposcontroller
var ConnPolicy cp_jointposcontroller;
connect("jointposcontroller.out_torques_port","torqueTransition.in_torquesA_port",cp_jointposcontroller)
connect("fkin.out_robotstatus_port","jointposcontroller.in_robotstatus_port",cp_jointposcontroller)
connect("fkin.out_coriolisAndGravity_port","jointposcontroller.in_coriolisAndGravity_port",cp_jointposcontroller)

#torquetransition
var ConnPolicy cp_torqueTransition;
connect("torquesuperimposer.out_torques_port","torqueTransition.in_torquesB_port",cp_torqueTransition)

connect("torqueTransition.out_torques_port", "seperator.in_torques_port", cp_torqueTransition)
connect("seperator.out_torques_port_0", "robot_gazebo.left_full_arm_JointTorqueCtrl", cp_torqueTransition)
connect("seperator.out_torques_port_1", "robot_gazebo.right_full_arm_JointTorqueCtrl", cp_torqueTransition)

#forceestimator
var ConnPolicy cp_forceestimator;
connect("fkin.out_robotstatus_port","forceestimator.in_robotstatus_port",cp_forceestimator)
connect("task.out_jacobianCstr_port","forceestimator.in_jacobianCstr_port",cp_forceestimator)
connect("task.out_jacobianDotCstr_port","forceestimator.in_jacobianDotCstr_port",cp_forceestimator)
connect("fkin.out_inertia_port","forceestimator.in_inertia_port",cp_forceestimator)
connect("fkin.out_coriolisAndGravity_port","forceestimator.in_h_port",cp_forceestimator)
connect("torqueTransition.out_torques_port","forceestimator.in_torques_port",cp_forceestimator)

#important peer connection for opertaionalCaller
connectPeers("task","caux")
connectPeers("task","positioncontroller")
connectPeers("task","torquesuperimposer")
connectPeers("task","nullspacecontroller")

robot_gazebo.setControlMode("left_full_arm", "JointTorqueCtrl")
robot_gazebo.setControlMode("right_full_arm", "JointTorqueCtrl")
gazebo.toggleDynamicsSimulation(true)

combiner.start()
seperator.start()
task.start()
fkin.start()
caux.start()
# start controller related components
trajectorygenerator.start()
positioncontroller.start()
nullspacecontroller.start()
forcecontroller.start()
torquesuperimposer.start()
jointposcontroller.start()
torqueTransition.start()
forceestimator.start()


#generate graph file
import("rtt_dot_service")
loadService("this", "dot")
dot.generate


#filelogger
loadComponent("filereporter", "OCL::FileReporting")
loadService("filereporter", "marshalling")
connectPeers("filereporter","fkin")
connectPeers("filereporter","trajectorygenerator")
connectPeers("filereporter","positioncontroller")
connectPeers("filereporter","task")
connectPeers("filereporter","forceestimator")
filereporter.reportPort("fkin", "out_robotstatus_port")
filereporter.reportPort("fkin", "out_cartPos_port")
filereporter.reportPort("fkin", "out_cartVel_port")
filereporter.reportPort("trajectorygenerator", "out_desiredTaskSpacePosition_port")
filereporter.reportPort("trajectorygenerator", "out_desiredTaskSpaceVelocity_port")
filereporter.reportPort("trajectorygenerator", "out_desiredTaskSpaceAcceleration_port")
filereporter.reportPort("positioncontroller", "out_force_port")
filereporter.reportPort("task", "out_cartPos_port")
filereporter.reportPort("forceestimator", "out_forceA_port")
filereporter.reportPort("forceestimator", "out_forceB_port")
filereporter.configure
filereporter.start


