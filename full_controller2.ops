import("eigen_typekit")
import("kdl_typekit")
import("rst-rt_typekit")

import("rtt_gazebo_embedded")
import("rtt-gazebo-robot-sim")

import("cosima-aux-kd")

import("LWRController")
require("os")

loadComponent("gazebo","RTTGazeboEmbedded")
setActivity("gazebo",0,10,ORO_SCHED_OTHER)
gazebo.argv = strings("--verbose")
gazebo.add_plugin("libRTTGazeboClockPlugin.so")

loadComponent("coman_gazebo","cogimon::robotSim")
setActivity("coman_gazebo",0,11,ORO_SCHED_OTHER)

var string path_world=os.getenv("prefix")+"/cogimon-minimal-nightly/etc/cogimon-scenarios/scenario-wipe-board/world/scn-wipe-board-vertical.world"
gazebo.world_path = path_world

gazebo.configure()
gazebo.start()
gazebo.toggleDynamicsSimulation(false)

gazebo.spawn_model("kuka", "model://kuka-lwr-4plus", 10)

coman_gazebo.getModel("kuka")
var int DOFsize = 7;

var string path_model_urdf = os.getenv("GAZEBO_MODEL_PATH")+"/kuka-lwr-4plus/model.urdf"
var string path_model_srdf = os.getenv("GAZEBO_MODEL_PATH")+"/kuka-lwr-4plus/model.srdf"
coman_gazebo.loadURDFAndSRDF(path_model_urdf, path_model_srdf)
coman_gazebo.configure()

#var bool translationOnly = true;
#var int TaskSpaceDimension = 3;
#var int CstrSpaceDimension = 3;
#var eigen_vector lambda = eigen_vector(3);
var bool translationOnly = false;
var int TaskSpaceDimension = 6;
var int CstrSpaceDimension = 6;
var eigen_vector lambda = eigen_vector(6);
lambda[0] = 0
lambda[1] = 0
lambda[2] = -5
lambda[3] = 0
lambda[4] = 0
lambda[5] = 0

#set initial configuration
var rstrt.kinematics.JointAngles initJointAngles = rstrt.kinematics.JointAngles(DOFsize)
initJointAngles.angles[0] = 0.0410
initJointAngles.angles[1] = 0.0606
initJointAngles.angles[2] = -0.0154
initJointAngles.angles[3] = -1.3954
initJointAngles.angles[4] = -0.0548
initJointAngles.angles[5] = 1.1377
initJointAngles.angles[6] = 0.0
gazebo.setInitialConfigurationForModel("kuka", initJointAngles);

var rstrt.kinematics.JointAngles desJointAngles = rstrt.kinematics.JointAngles(DOFsize)
desJointAngles.angles[0] = 0.0410
desJointAngles.angles[1] = 0.0606
desJointAngles.angles[2] = -0.0154
desJointAngles.angles[3] = -1.3954
desJointAngles.angles[4] = -0.0548
desJointAngles.angles[5] = 1.1377
desJointAngles.angles[6] = 0.0

loadComponent("fkin", "WrapperKDL")
setActivity("fkin",0.01,10,ORO_SCHED_OTHER)
fkin.loadModel(path_model_urdf, "lwr_arm_base_link", "lwr_arm_7_link");
fkin.setDOFsize(DOFsize);
fkin.configure()

loadComponent("task", "TaskDescriberSingleArm")
setActivity("task",0.01,10,ORO_SCHED_OTHER)
task.setDOFsize(DOFsize);
task.configure()

loadComponent("caux", "ConstrainedAuxiliaries")
setActivity("caux",0.01,10,ORO_SCHED_OTHER)
caux.setDOFsize(DOFsize);
caux.setTaskSpaceDimension(TaskSpaceDimension);
caux.setCstrSpaceDimension(CstrSpaceDimension);
caux.preparePorts();
caux.configure()


# load controller related stuff
# load TrajectoryGenerator
loadComponent("trajectorygenerator", "TrajectoryGenerator")
setActivity("trajectorygenerator",0.01,30,ORO_SCHED_OTHER)
trajectorygenerator.setTranslationOnly(translationOnly);
trajectorygenerator.preparePorts()
trajectorygenerator.radius=0.1
trajectorygenerator.configure()

# load PositionController
loadComponent("positioncontroller", "PositionController")
setActivity("positioncontroller",0.01,30,ORO_SCHED_OTHER)
positioncontroller.setTranslationOnly(translationOnly);
positioncontroller.setDOFsize(DOFsize);
positioncontroller.setConstrainedVersionMode(true);
positioncontroller.setTaskSpaceDimension(TaskSpaceDimension);
positioncontroller.setGains(200,10);
positioncontroller.setGainsOrientation(300,10);
positioncontroller.preparePorts();
positioncontroller.configure();

# connect TrajectoryGenerator to PositionController
var ConnPolicy cp_traj_posCtrl;
connect("trajectorygenerator.out_desiredTaskSpacePosition_port", "positioncontroller.in_desiredTaskSpacePosition_port", cp_traj_posCtrl)
connect("trajectorygenerator.out_desiredTaskSpaceVelocity_port", "positioncontroller.in_desiredTaskSpaceVelocity_port", cp_traj_posCtrl)
connect("trajectorygenerator.out_desiredTaskSpaceAcceleration_port", "positioncontroller.in_desiredTaskSpaceAcceleration_port", cp_traj_posCtrl)


# load NullspaceController
loadComponent("nullspacecontroller", "NullspaceController")
setActivity("nullspacecontroller",0.01,31,ORO_SCHED_OTHER)
nullspacecontroller.setDOFsize(DOFsize);
nullspacecontroller.setTaskSpaceDimension(TaskSpaceDimension);
nullspacecontroller.preparePorts();
nullspacecontroller.setGains(10,0.3);
nullspacecontroller.setDesiredAngles(desJointAngles)
nullspacecontroller.configure()

# load Constrained ForceController
loadComponent("forcecontroller", "ConstrainedForceController")
setActivity("forcecontroller",0.01,31,ORO_SCHED_OTHER)
forcecontroller.setDOFsize(DOFsize);
forcecontroller.setCstrSpaceDimension(CstrSpaceDimension);
forcecontroller.preparePorts();
forcecontroller.setLambda(lambda);
forcecontroller.configure()


# load TorqueSuperimposer
loadComponent("torquesuperimposer", "TorqueSuperimposer")
setActivity("torquesuperimposer",0.01,29,ORO_SCHED_OTHER)
torquesuperimposer.setDOFsize(DOFsize);
torquesuperimposer.setConstrainedVersionMode(true);
torquesuperimposer.configure()

# connect PositionController to TorqueSuperimposer
var ConnPolicy cp_pos_sum;
connect("positioncontroller.out_torques_port", "torquesuperimposer.in_torquesA_port", cp_pos_sum)

# connect NullspaceController to TorqueSuperimposer
var ConnPolicy cp_null_sum;
connect("nullspacecontroller.out_torques_port", "torquesuperimposer.in_torquesB_port", cp_null_sum)

# connect ForceController to TorqueSuperimposer
var ConnPolicy cp_force_sum;
connect("forcecontroller.out_torques_port", "torquesuperimposer.in_torquesC_port", cp_force_sum)


# connect all auxiliaries
var ConnPolicy cp_aux;
connect("coman_gazebo.full_arm_JointFeedback", "fkin.in_robotstatus_port", cp_aux)

connect("fkin.out_jacobian_port", "task.in_jacobian_port", cp_aux)
connect("fkin.out_jacobianDot_port", "task.in_jacobianDot_port", cp_aux)

#connect("task.out_jacobianTranslationTask_port", "caux.in_jacobianTask_port", cp_aux)
#connect("task.out_jacobianDotTranslationTask_port", "caux.in_jacobianDotTask_port", cp_aux)
#connect("task.out_jacobianTranslationCstr_port", "caux.in_jacobianCstr_port", cp_aux)
#connect("task.out_jacobianDotTranslationCstr_port", "caux.in_jacobianDotCstr_port", cp_aux)
connect("task.out_jacobianTask_port", "caux.in_jacobianTask_port", cp_aux)
connect("task.out_jacobianDotTask_port", "caux.in_jacobianDotTask_port", cp_aux)
connect("task.out_jacobianCstr_port", "caux.in_jacobianCstr_port", cp_aux)
connect("task.out_jacobianDotCstr_port", "caux.in_jacobianDotCstr_port", cp_aux)

connect("fkin.out_inertia_port", "caux.in_inertia_port", cp_aux)

connect("fkin.out_inertia_port", "forcecontroller.in_inertia_port", cp_aux)
connect("fkin.out_coriolisAndGravity_port", "forcecontroller.in_h_port", cp_aux)

###
# connect AUX to PositionController
###
var ConnPolicy cp_aux_positioncontroller;
# kinematics part
#connect("task.out_jacobianTranslationTask_port", "positioncontroller.in_jacobian_port", cp_aux_positioncontroller)
#connect("task.out_jacobianDotTranslationTask_port", "positioncontroller.in_jacobianDot_port", cp_aux_positioncontroller)
connect("task.out_jacobianTask_port", "positioncontroller.in_jacobian_port", cp_aux_positioncontroller)
connect("task.out_jacobianDotTask_port", "positioncontroller.in_jacobianDot_port", cp_aux_positioncontroller)

#connect("fkin.out_cartPosTranslation_port", "positioncontroller.in_currentTaskSpacePosition_port", cp_aux_positioncontroller)
#connect("fkin.out_cartVelTranslation_port", "positioncontroller.in_currentTaskSpaceVelocity_port", cp_aux_positioncontroller)
connect("fkin.out_cartPos_port", "positioncontroller.in_currentTaskSpacePosition_port", cp_aux_positioncontroller)
connect("fkin.out_cartVel_port", "positioncontroller.in_currentTaskSpaceVelocity_port", cp_aux_positioncontroller)

connect("fkin.out_robotstatus_port", "positioncontroller.in_robotstatus_port", cp_aux_positioncontroller)
connect("fkin.out_robotstatus_port", "forcecontroller.in_robotstatus_port", cp_aux_positioncontroller)

# dynamics part
connect("fkin.out_coriolisAndGravity_port", "positioncontroller.in_h_port", cp_aux_positioncontroller)

# constrained part
connect("caux.out_lambdaCstr_port", "positioncontroller.in_constraintLambda_port", cp_aux_positioncontroller)
connect("caux.out_MCstr_port", "positioncontroller.in_constraintM_port", cp_aux_positioncontroller)
connect("caux.out_P_port", "positioncontroller.in_P_port", cp_aux_positioncontroller)
connect("caux.out_CCstr_port", "positioncontroller.in_constraintC_port", cp_aux_positioncontroller)



#connect("task.out_jacobianTranslationCstr_port", "forcecontroller.in_jacobian_c_port", cp_aux_positioncontroller)
connect("task.out_jacobianCstr_port", "forcecontroller.in_jacobian_c_port", cp_aux_positioncontroller)
connect("caux.out_CCstr_port", "forcecontroller.in_Cc_port", cp_aux_positioncontroller)
connect("caux.out_MCstr_port", "forcecontroller.in_inertia_c_port", cp_aux_positioncontroller)
connect("caux.out_P_port", "forcecontroller.in_p_port", cp_aux_positioncontroller)

###
# connect AUX to NullspaceController
###
var ConnPolicy cp_aux_nullspacecontroller;
# kinematics part
#connect("task.out_jacobianTranslationTask_port", "nullspacecontroller.in_jacobian_port", cp_aux_nullspacecontroller)
connect("task.out_jacobianTask_port", "nullspacecontroller.in_jacobian_port", cp_aux_nullspacecontroller)

connect("fkin.out_robotstatus_port", "nullspacecontroller.in_robotstatus_port", cp_aux_nullspacecontroller)

# constrained part
connect("caux.out_jacobianMPI_port", "nullspacecontroller.in_jacobianInv_port", cp_aux_nullspacecontroller)

###
# connect AUX to TorqueSuperImposer
###
var ConnPolicy cp_proj_torquesuperimposer;
connect("caux.out_P_port", "torquesuperimposer.in_projection_port", cp_aux_nullspacecontroller)

###
# connect TorqueSuperImposer to ROBOT
###
var ConnPolicy cp_torquesuperimposer_robot;
connect("torquesuperimposer.out_torques_port", "coman_gazebo.full_arm_JointTorqueCtrl", cp_torquesuperimposer_robot)


coman_gazebo.setControlMode("full_arm", "JointTorqueCtrl")
gazebo.toggleDynamicsSimulation(true)


task.start()
fkin.start()
caux.start()
# start controller related components
trajectorygenerator.start()
positioncontroller.start()
nullspacecontroller.start()
forcecontroller.start()
torquesuperimposer.start()

#generate graph file
import("rtt_dot_service")
loadService("this", "dot")
dot.generate


#filelogger
loadComponent("filereporter", "OCL::FileReporting")
loadService("filereporter", "marshalling")
connectPeers("filereporter","fkin")
connectPeers("filereporter","trajectorygenerator")
connectPeers("filereporter","positioncontroller")
filereporter.reportPort("fkin", "out_cartPos_port")
filereporter.reportPort("fkin", "out_cartVel_port")
filereporter.reportPort("trajectorygenerator", "out_desiredTaskSpacePosition_port")
filereporter.reportPort("trajectorygenerator", "out_desiredTaskSpaceVelocity_port")
filereporter.reportPort("trajectorygenerator", "out_desiredTaskSpaceAcceleration_port")
filereporter.reportPort("positioncontroller", "out_force_port")
filereporter.configure
filereporter.start


